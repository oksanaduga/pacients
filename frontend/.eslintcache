[{"/Users/oksanaduga/projects/pacients/frontend/src/index.js":"1","/Users/oksanaduga/projects/pacients/frontend/src/SearchUsers.js":"2","/Users/oksanaduga/projects/pacients/frontend/src/UsersList.js":"3","/Users/oksanaduga/projects/pacients/frontend/src/RegistrationForm.js":"4"},{"size":10219,"mtime":1615462362733,"results":"5","hashOfConfig":"6"},{"size":482,"mtime":1607603358786,"results":"7","hashOfConfig":"6"},{"size":748,"mtime":1607603353411,"results":"8","hashOfConfig":"6"},{"size":1979,"mtime":1615455791128,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12","usedDeprecatedRules":"13"},"lomwjh",{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"13"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"13"},"/Users/oksanaduga/projects/pacients/frontend/src/index.js",["24","25","26","27","28","29","30","31","32","33","34"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport RegistrationForm from './RegistrationForm.js';\nimport UsersList from './UsersList.js';\nimport SearchUsers from './SearchUsers.js';\n\n\nclass Index extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      registeredUsers: [], //зареганные юзеры\n      searchData: '', //строка поиска\n      userDataForm: { //форма для сабмита\n        name: '',\n        sex: 'm',\n        date: '',\n        address: '',\n        medicine: '',\n        id: '',//из бд, вычисляется автоматически, изначально отсутствует\n        errors: {\n          name: '',\n          sex: '',\n          date: '',\n          address: '',\n          medicine: '',\n        },\n      },\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);//сабмит сохраняет пользователя или изменяет если он уже существовал\n    //в конце возвращает пустую форму для последующих добавлений 1\n    this.handleChange = this.handleChange.bind(this);//все что вводится в поле сразу + в поле поиска в стейте 2\n    this.handleChangeUserDataForm = this.handleChangeUserDataForm.bind(this);\n    //при потере фокуса 3\n    //данные из этого поля\n    //должна сразу оказаться в стейте\n    this.handleEditUser = this.handleEditUser.bind(this);//редактирование 4\n    //вытаскивает из события ид юзера кладет юзера в стейт для последующего редактирования\n    this.handleDeleteUser = this.handleDeleteUser.bind(this);//удаление 5\n    //вытаскивает из события ид юзера удаляет в бд, фильтрует сохраненных юзеров и выводит обновленный список\n  }\n\n  componentDidMount() {\n    fetch('/users').then(res => res.json()).then(data => {\n      this.setState({\n        registeredUsers: [...data],\n        searchData: this.state.searchData,//если что-то было в поиске то занести сюда если нет надо внести ''\n        userDataForm: {\n          name: '',\n          sex: 'm',\n          date: '',\n          address: '',\n          medicine: '',\n          id: '',\n          errors: {\n            name: '',\n            sex: '',\n            date: '',\n            address: '',\n            medicine: '',\n          },\n        },\n      });\n    }).catch((e) => console.log('some error', e));\n  }\n\n  handleSubmit(event) {//сабмит формы\n    const { registeredUsers, userDataForm } = this.state;\n\n    const user = {\n      name: userDataForm.name,\n      birth_date: userDataForm.date,\n      gender: userDataForm.sex,\n      living_address: userDataForm.address,\n      insurance_policy: userDataForm.medicine,\n      id: userDataForm.id,\n    };\n\n    let status = function (response) {\n      if (response.status !== 200) {\n        return Promise.reject(new Error(response.statusText))\n      }\n      return Promise.resolve(response)\n    }\n    let json = function (response) {\n      return response.json()\n    }\n\n    if (userDataForm.id == '') {//если ид ne существует то запрос пост\n        fetch('/users', {\n            method: 'POST',\n            headers: {\n              'Content-Type':  'application/json'\n            },\n            body: JSON.stringify(user),\n          })\n            .then(status)\n            .then(json)\n            .then(() => {\n              let arr = [];\n              for (const [key, value] of Object.entries(this.state.userDataForm)) {\n                arr = [...arr, `${key}: ${value}`];\n              }\n              return arr.join('\\n');\n            })\n            .then((str) => {\n              alert(`Пациент ${str} зарегистрирован`);\n            })\n            .catch((error) => {\n              return error.map(({ msg, param }) => {\n                this.setState({\n                  userDataForm: {\n                    errors: {\n                      [param]: msg,\n                    },\n                  },\n                });\n              });\n              console.log('error', error)\n            });\n    } else {//если ид существует то запрос путi на изменение юзера\n          fetch(`/users/${userDataForm.id}`, {\n              method: 'PUT',\n              headers: {\n                'Content-Type':  'application/json'\n              },\n              body: JSON.stringify(user),\n            }).then((response) => {\n              return response.json();\n            }).then((data) => {\n              let arr = [];\n              for (const [key, value] of Object.entries(data)) {\n                arr = [...arr, `${key}: ${value}`];\n              }\n              return arr.join('\\n');\n            }).then((str) => {\n              alert(`Пациент ${str} изменен`);\n            }).catch((e) => console.log('some error', e));\n       };\n\n         fetch('/users').then(res => res.json()).then(data => {\n           this.setState({\n             registeredUsers: [...data],\n             searchData: this.state.searchData,//если что-то было в поиске то занести сюда если нет надо внести ''\n             userDataForm: {\n               name: '',\n               sex: 'm',\n               date: '',\n               address: '',\n               medicine: '',\n               id: '',\n               errors: {\n                 name: '',\n                 sex: '',\n                 date: '',\n                 address: '',\n                 medicine: '',\n               },\n             },\n           });\n         }).catch((e) => console.log('some error', e));\n\n  }\n\n  handleChange(event) {\n    this.setState({ searchData: event.target.value }, async () => {\n      let { searchData } = this.state;\n\n      fetch(`/users?name=${searchData}`).then(res => res.json()).then(data => {\n        console.log(data);\n        this.setState({\n          registeredUsers: [...data],\n          searchData: searchData,\n        });\n      }).catch((e) => console.log('some error', e));\n    }) // внесли в стейт\n    //все что вводится в поле сразу добавляется\n    //в поле поиска в стейте\n  }\n\n  handleChangeUserDataForm(event) {\n    //при потере фокуса\n    //данные из этого поля\n    //должна сразу оказаться в стейте\n    const oldDataForm = this.state.userDataForm;\n    const { name, value } = event.target;\n    const newState = { userDataForm: { ...oldDataForm, [name]: value } };\n    this.setState(newState);\n  }\n\n  handleEditUser(event) {\n    //редактирование\n    //вытаскивает из события ид юзера и помещает этого юзера в форму для редактирования\n    const idUserForEdit = event.target.dataset.userId;\n    const { registeredUsers, userDataForm } = this.state;\n    //надо отфильтровать юзера и одного поместить в форму для последующего сабмита\n\n    const filterUsersById = registeredUsers.filter((el) => el['id'] == idUserForEdit)[0];\n    const { name, birth_date, gender, living_address, insurance_policy, id } = filterUsersById;\n      this.setState({\n        userDataForm: {\n          name: name,\n          sex: gender,\n          date: birth_date,\n          address: living_address,\n          medicine: insurance_policy,\n          id: id,\n        }\n      });\n  }\n\n  handleDeleteUser(event) {\n    //удаление\n    const idUserForEdit = event.target.dataset.userId;\n\n    fetch(`/users/${idUserForEdit}`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type':  'application/json'\n        },\n      }).then((response) => {\n        return response.json();\n      }).then((data) => {\n        let arr = [];\n        for (const [key, value] of Object.entries(data)) {\n          arr = [...arr, `${key}: ${value}`];\n        }\n        return arr.join('; ');\n      }).then((str) => {\n        alert(`Пациент ${str} удален`);\n      });\n\n    const { registeredUsers } = this.state;\n    const filterUsersById = registeredUsers.filter((el) => el['id'] != idUserForEdit);\n    this.setState({registeredUsers: [...filterUsersById ]});\n  }\n\n  render() {\n    const { searchData, registeredUsers, userDataForm } = this.state;\n\n    const rows = registeredUsers.map((el, i) => {\n      const { name, birth_date, gender, living_address, insurance_policy, id } = el;\n       return (\n         <tr key={id}>\n           <td>{i + 1}</td>\n           <td>{name}</td>\n           <td>{birth_date}</td>\n           <td>{gender}</td>\n           <td>{living_address}</td>\n           <td>{insurance_policy}</td>\n           <td>\n              <a href=\"#\" name='edit' data-user-id={id} onClick={this.handleEditUser}>Редактировать &nbsp;</a>\n              <a href=\"#\" name='delete' data-user-id={id} onClick={this.handleDeleteUser}>Удалить</a>\n           </td>\n         </tr>\n       )\n    });\n\n    return(\n      <div class=\"container-fluid\">\n        <div class='row'>\n          <div class='col-3'>\n            <h2>Регистрация</h2>\n            <RegistrationForm value={this.state.userDataForm}\n              submit={this.handleSubmit}//регистрация\n              change={this.handleChangeUserDataForm}//срабатывает при потере фокуса\n            />\n          </div>\n          <div class='col-9'>\n            <h2>Зарегистрированные пользователи</h2>\n            <SearchUsers value={this.state.searchData} change={this.handleChange}/>\n            <UsersList rows={rows}/>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(\n  <Index />,\n  document.getElementById('root')\n);\n",["35","36"],"/Users/oksanaduga/projects/pacients/frontend/src/SearchUsers.js",["37"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nfunction SearchUsers(props) {\n  const value = props.value;\n  const change = props.change;\n  return(\n    <form>\n      <div class=\"mb-3\">\n        <label class=\"form-label\" for=\"search\">Поиск:</label>\n        <input class=\"form-control\" type=\"text\" id=\"search\" name=\"search\"\n          value={value}\n          onChange={change}\n        />\n    </div>\n    </form>\n );\n};\n\nexport default SearchUsers;\n",["38","39"],"/Users/oksanaduga/projects/pacients/frontend/src/UsersList.js",["40"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nfunction UsersList(props) {\n  const rows = props.rows;\n  return(\n    <table class=\"table table-success table-stripedt\">\n      <thead>\n        <tr class=\"table-light\">\n          <th class=\"table-light\">№</th>\n          <th class=\"table-light\">ФИО</th>\n          <th class=\"table-light\">Пол</th>\n          <th class=\"table-light\">Дата рождения</th>\n          <th class=\"table-light\">Адрес</th>\n          <th class=\"table-light\">Номер полиса ОМС</th>\n          <th class=\"table-light\">Действие</th>\n        </tr>\n       </thead>\n       <tbody>\n        {rows}\n      </tbody>\n    </table>\n );\n};\n\nexport default UsersList;\n","/Users/oksanaduga/projects/pacients/frontend/src/RegistrationForm.js",["41"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nfunction RegistrationForm(props) {\n    const data = props.value;\n\n    return(\n      <form onSubmit={props.submit}>\n        <div class=\"mb-3\">\n          <label class=\"form-label\" for=\"name\">ФИО</label>\n          <input class=\"form-control\" type=\"text\" id=\"name\" name=\"name\"\n              value={data.name}\n              onChange={props.change}\n              placeholder=\"Иванов Иван Иванович\"\n          />\n          <div id=\"name\" value={data.errors.name}></div>\n        </div>\n\n        <div class=\"mb-3\">\n          <label class=\"form-label\" for=\"sex\">Пол</label>\n          <select class=\"form-control\" id=\"sex\" name=\"sex\"\n              value={data.sex}\n              onChange={props.change}>\n                <option>m</option>\n                <option>f</option>\n           </select>\n          </div>\n\n          <div class=\"mb-3\">\n            <label class=\"form-label\" for=\"date\">Дата рождения</label>\n            <input class=\"form-control\" type=\"date\" id=\"date\" name=\"date\"\n              value={data.date}\n              onChange={props.change}\n            />\n          </div>\n\n          <div class=\"mb-3\">\n            <label class=\"form-label\" for=\"address\">Адрес</label>\n            <input class=\"form-control\" type=\"text\" id=\"address\" name=\"address\"\n              value={data.address}\n              onChange={props.change}\n            />\n          </div>\n\n          <div class=\"mb-3\">\n            <label class=\"form-label\" for=\"medicine\">Номер полиса ОМС</label>\n            <input class=\"form-control\" type=\"text\" id=\"medicine\" name=\"medicine\"\n                value={data.medicine}\n                onChange={props.change}\n                placeholder=\"00000000000\"\n             />\n          </div>\n\n          <input class=\"btn btn-light\" type='submit' value='Сохранить'/>\n      </form>\n    );\n}\n\nexport default RegistrationForm;\n",{"ruleId":"42","severity":1,"message":"43","line":70,"column":13,"nodeType":"44","messageId":"45","endLine":70,"endColumn":28},{"ruleId":"46","severity":1,"message":"47","line":91,"column":25,"nodeType":"48","messageId":"49","endLine":91,"endColumn":27},{"ruleId":"50","severity":1,"message":"51","line":112,"column":49,"nodeType":"52","messageId":"53","endLine":112,"endColumn":51},{"ruleId":"54","severity":1,"message":"55","line":121,"column":15,"nodeType":"56","messageId":"57","endLine":121,"endColumn":42},{"ruleId":"42","severity":1,"message":"58","line":197,"column":30,"nodeType":"44","messageId":"45","endLine":197,"endColumn":42},{"ruleId":"46","severity":1,"message":"47","line":200,"column":69,"nodeType":"48","messageId":"49","endLine":200,"endColumn":71},{"ruleId":"46","severity":1,"message":"59","line":236,"column":69,"nodeType":"48","messageId":"49","endLine":236,"endColumn":71},{"ruleId":"42","severity":1,"message":"60","line":241,"column":13,"nodeType":"44","messageId":"45","endLine":241,"endColumn":23},{"ruleId":"42","severity":1,"message":"58","line":241,"column":42,"nodeType":"44","messageId":"45","endLine":241,"endColumn":54},{"ruleId":"61","severity":1,"message":"62","line":254,"column":15,"nodeType":"63","endLine":254,"endColumn":87},{"ruleId":"61","severity":1,"message":"62","line":255,"column":15,"nodeType":"63","endLine":255,"endColumn":91},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"42","severity":1,"message":"68","line":2,"column":8,"nodeType":"44","messageId":"45","endLine":2,"endColumn":16},{"ruleId":"64","replacedBy":"69"},{"ruleId":"66","replacedBy":"70"},{"ruleId":"42","severity":1,"message":"68","line":2,"column":8,"nodeType":"44","messageId":"45","endLine":2,"endColumn":16},{"ruleId":"42","severity":1,"message":"68","line":2,"column":8,"nodeType":"44","messageId":"45","endLine":2,"endColumn":16},"no-unused-vars","'registeredUsers' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","'userDataForm' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'searchData' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-native-reassign",["71"],"no-negated-in-lhs",["72"],"'ReactDOM' is defined but never used.",["71"],["72"],"no-global-assign","no-unsafe-negation"]