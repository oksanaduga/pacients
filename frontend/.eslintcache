[{"/Users/oksanaduga/projects/pacients/frontend/src/index.js":"1","/Users/oksanaduga/projects/pacients/frontend/src/SearchUsers.js":"2","/Users/oksanaduga/projects/pacients/frontend/src/UsersList.js":"3","/Users/oksanaduga/projects/pacients/frontend/src/RegistrationForm.js":"4"},{"size":11337,"mtime":1615976546263,"results":"5","hashOfConfig":"6"},{"size":482,"mtime":1607603358786,"results":"7","hashOfConfig":"6"},{"size":748,"mtime":1607603353411,"results":"8","hashOfConfig":"6"},{"size":2270,"mtime":1615969612415,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12","usedDeprecatedRules":"13"},"lomwjh",{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"13"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"13"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"23"},"/Users/oksanaduga/projects/pacients/frontend/src/index.js",["24","25","26","27","28","29","30"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport RegistrationForm from './RegistrationForm.js';\nimport UsersList from './UsersList.js';\nimport SearchUsers from './SearchUsers.js';\n\n\nclass Index extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      registeredUsers: [], //зареганные юзеры\n      searchData: '', //строка поиска\n      userDataForm: { //форма для сабмита\n        name: '',\n        sex: 'm',\n        date: '',\n        address: '',\n        medicine: '',\n        id: '',//из бд, вычисляется автоматически, изначально отсутствует\n        invalidInformation: {\n          name: '',\n          sex: '',\n          date: '',\n          address: '',\n          medicine: '',\n        },\n      },\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);//сабмит сохраняет пользователя или изменяет если он уже существовал\n    //в конце возвращает пустую форму для последующих добавлений 1\n    this.handleChange = this.handleChange.bind(this);//все что вводится в поле сразу + в поле поиска в стейте 2\n    this.handleChangeUserDataForm = this.handleChangeUserDataForm.bind(this);\n    //при потере фокуса 3\n    //данные из этого поля\n    //должна сразу оказаться в стейте\n    this.handleEditUser = this.handleEditUser.bind(this);//редактирование 4\n    //вытаскивает из события ид юзера кладет юзера в стейт для последующего редактирования\n    this.handleDeleteUser = this.handleDeleteUser.bind(this);//удаление 5\n    //вытаскивает из события ид юзера удаляет в бд, фильтрует сохраненных юзеров и выводит обновленный список\n  }\n\n  getUsers = () => {\n    fetch('/users').then(res => res.json()).then(data => {\n      this.setState({\n        registeredUsers: [...data],\n        searchData: this.state.searchData,\n        userDataForm: {\n          name: '',\n          sex: 'm',\n          date: '',\n          address: '',\n          medicine: '',\n          id: '',\n          invalidInformation: {\n            name: '',\n            gender: '',\n            birth_date: '',\n            living_address: '',\n            insurance_policy: '',\n          },\n        },\n      });\n    }).catch((e) => console.log('some error', e));\n  }\n\n  componentDidMount() {\n    this.getUsers();\n  }\n\n  handleSubmit(event) {//сабмит формы\n    event.preventDefault();\n    const { registeredUsers, userDataForm, } = this.state;\n\n    const user = {\n      name: userDataForm.name,\n      birth_date: userDataForm.date,\n      gender: userDataForm.sex,\n      living_address: userDataForm.address,\n      insurance_policy: userDataForm.medicine,\n      id: userDataForm.id,\n    };\n\n    let json = function (response) {\n      return response.json();\n    }\n\n    let putInvalidInformation = async (data) => {\n      const newinvalidInformation = await data.reduce((acc, { param, msg }) => {\n        return { ...acc, [param]: msg, };\n      }, {});\n      return newinvalidInformation;\n    }\n\n    let putValidInformation = async (data) => {\n      let arr = [];\n      for (const [key, value] of Object.entries(this.state.userDataForm)) {\n        if (!(key === 'invalidInformation')) {\n          arr = [...arr, `${key}: ${value}`];\n        }\n      }\n      const str = await arr.join('\\n');\n      return str;\n    }\n\n    if (!(userDataForm.id > 0)) {//если ид ne существует то запрос пост\n        fetch('/users', {\n            method: 'POST',\n            headers: {\n              'Content-Type':  'application/json'\n            },\n            body: JSON.stringify(user),\n          })\n            .then(json)\n            .then((data) => {\n              if (data.errors) {\n                return putInvalidInformation(data.errors).then((errors) => {\n                  this.setState({\n                    userDataForm: {\n                      ...userDataForm,\n                      invalidInformation: errors,\n                    }\n                  })\n                })\n              } else if (data === 'User exist') {\n                alert(`Пациент с таким ОМС уже существует`);\n              } else {\n                return putValidInformation(data)\n                .then((str) => {\n                  this.setState({\n                    userDataForm: {\n                      ...userDataForm,\n                      invalidInformation: {\n                        name: '',\n                        gender: '',\n                        birth_date: '',\n                        living_address: '',\n                        insurance_policy: '',\n                      },\n                     }\n                  });\n                  alert(`Пациент ${str} изменен`);\n                  this.getUsers();\n                });\n              }\n            })\n            .catch((error) => error);\n    } else {//если ид существует то запрос путi на изменение юзера\n          fetch(`/users/${userDataForm.id}`, {\n              method: 'PUT',\n              headers: {\n                'Content-Type':  'application/json'\n              },\n              body: JSON.stringify(user),\n            })\n            .then(json)\n            .then((data) => {\n              if (data.errors) {\n                return putInvalidInformation(data.errors).then((errors) => {\n                  this.setState({\n                    userDataForm: {\n                      ...userDataForm,\n                      invalidInformation: errors,\n                    }\n                  })\n                })\n              } else if (data === 'User not exist') {\n                alert(`Пациент с таким ОМС не существует`);\n              } else {\n                return putValidInformation(data)\n                .then((str) => {\n                  this.setState({\n                    userDataForm: {\n                      ...userDataForm,\n                      invalidInformation: {\n                        name: '',\n                        gender: '',\n                        birth_date: '',\n                        living_address: '',\n                        insurance_policy: '',\n                      },\n                     }\n                  });\n                  alert(`Пациент ${str} зарегистрирован`);\n                  this.getUsers();\n                });\n              }\n            })\n            .catch((error) => error);\n    }\n  }\n\n\n  handleChange(event) {\n    this.setState({ searchData: event.target.value }, async () => {\n      let { searchData } = this.state;\n\n      fetch(`/users?name=${searchData}`).then(res => res.json()).then(data => {\n        console.log(data);\n        this.setState({\n          registeredUsers: [...data],\n          searchData: searchData,\n        });\n      }).catch((e) => console.log('some error', e));\n    }) // внесли в стейт\n    //все что вводится в поле сразу добавляется\n    //в поле поиска в стейте\n  }\n\n  handleChangeUserDataForm(event) {\n    //при потере фокуса\n    //данные из этого поля\n    //должна сразу оказаться в стейте\n    const oldDataForm = this.state.userDataForm;\n    const { name, value } = event.target;\n    const newState = {\n      userDataForm: {\n        ...oldDataForm,\n        [name]: value,\n        invalidInformation: {\n          name: '',\n          gender: '',\n          birth_date: '',\n          living_address: '',\n          insurance_policy: '',\n        },\n      }\n    };\n    this.setState(newState);\n  }\n\n  handleEditUser(event) {\n    //редактирование\n    //вытаскивает из события ид юзера и помещает этого юзера в форму для редактирования\n    const idUserForEdit = event.target.dataset.userId;\n    const { registeredUsers, userDataForm } = this.state;\n    //надо отфильтровать юзера и одного поместить в форму для последующего сабмита\n\n    const filterUsersById = registeredUsers.filter((el) => el['id'] == idUserForEdit)[0];\n    const { name, birth_date, gender, living_address, insurance_policy, id } = filterUsersById;\n      this.setState({\n        userDataForm: {\n          ...userDataForm,\n          name: name,\n          sex: gender,\n          date: birth_date,\n          address: living_address,\n          medicine: insurance_policy,\n          id: id,\n        }\n      });\n  }\n\n  handleDeleteUser(event) {\n    //удаление\n    const idUserForEdit = event.target.dataset.userId;\n\n    fetch(`/users/${idUserForEdit}`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type':  'application/json'\n        },\n      }).then((response) => {\n        return response.json();\n      }).then((data) => {\n        let arr = [];\n        for (const [key, value] of Object.entries(data)) {\n          arr = [...arr, `${key}: ${value}`];\n        }\n        return arr.join('; ');\n      }).then((str) => {\n        alert(`Пациент ${str} удален`);\n      });\n\n    const { registeredUsers } = this.state;\n    const filterUsersById = registeredUsers.filter((el) => el['id'] != idUserForEdit);\n    this.setState({registeredUsers: [...filterUsersById ]});\n  }\n\n  render() {\n    const { searchData, registeredUsers, userDataForm } = this.state;\n\n    const rows = registeredUsers.map((el, i) => {\n      const { name, birth_date, gender, living_address, insurance_policy, id } = el;\n       return (\n         <tr key={id}>\n           <td>{i + 1}</td>\n           <td>{name}</td>\n           <td>{birth_date}</td>\n           <td>{gender}</td>\n           <td>{living_address}</td>\n           <td>{insurance_policy}</td>\n           <td>\n              <a href=\"#\" name='edit' data-user-id={id} onClick={this.handleEditUser}>Редактировать &nbsp;</a>\n              <a href=\"#\" name='delete' data-user-id={id} onClick={this.handleDeleteUser}>Удалить</a>\n           </td>\n         </tr>\n       )\n    });\n\n    return(\n      <div class=\"container-fluid\">\n        <div class='row'>\n          <div class='col-3'>\n            <h2>Регистрация</h2>\n            <RegistrationForm value={this.state.userDataForm}\n              submit={this.handleSubmit}//регистрация\n              change={this.handleChangeUserDataForm}//срабатывает при потере фокуса\n            />\n          </div>\n          <div class='col-9'>\n            <h2>Зарегистрированные пользователи</h2>\n            <SearchUsers value={this.state.searchData} change={this.handleChange}/>\n            <UsersList rows={rows}/>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(\n  <Index />,\n  document.getElementById('root')\n);\n",["31","32"],"/Users/oksanaduga/projects/pacients/frontend/src/SearchUsers.js",["33"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nfunction SearchUsers(props) {\n  const value = props.value;\n  const change = props.change;\n  return(\n    <form>\n      <div class=\"mb-3\">\n        <label class=\"form-label\" for=\"search\">Поиск:</label>\n        <input class=\"form-control\" type=\"text\" id=\"search\" name=\"search\"\n          value={value}\n          onChange={change}\n        />\n    </div>\n    </form>\n );\n};\n\nexport default SearchUsers;\n","/Users/oksanaduga/projects/pacients/frontend/src/UsersList.js",["34"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nfunction UsersList(props) {\n  const rows = props.rows;\n  return(\n    <table class=\"table table-success table-stripedt\">\n      <thead>\n        <tr class=\"table-light\">\n          <th class=\"table-light\">№</th>\n          <th class=\"table-light\">ФИО</th>\n          <th class=\"table-light\">Пол</th>\n          <th class=\"table-light\">Дата рождения</th>\n          <th class=\"table-light\">Адрес</th>\n          <th class=\"table-light\">Номер полиса ОМС</th>\n          <th class=\"table-light\">Действие</th>\n        </tr>\n       </thead>\n       <tbody>\n        {rows}\n      </tbody>\n    </table>\n );\n};\n\nexport default UsersList;\n","/Users/oksanaduga/projects/pacients/frontend/src/RegistrationForm.js",["35"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nfunction RegistrationForm(props) {\n    const data = props.value;\n\n    return(\n      <form onSubmit={props.submit}>\n        <div class=\"mb-3\">\n          <label class=\"form-label\" for=\"name\">ФИО</label>\n          <input class=\"form-control\" type=\"text\" id=\"name\" name=\"name\"\n              value={data.name}\n              onChange={props.change}\n              placeholder=\"Иванов Иван Иванович\"\n          />\n        <p class=\"errors\">{data.invalidInformation.name}</p>\n        </div>\n\n        <div class=\"mb-3\">\n          <label class=\"form-label\" for=\"sex\">Пол</label>\n          <select class=\"form-control\" id=\"sex\" name=\"sex\"\n              value={data.sex}\n              onChange={props.change}>\n                <option>m</option>\n                <option>f</option>\n           </select>\n           <p class=\"errors\">{data.invalidInformation.gender}</p>\n          </div>\n\n          <div class=\"mb-3\">\n            <label class=\"form-label\" for=\"date\">Дата рождения</label>\n            <input class=\"form-control\" type=\"date\" id=\"date\" name=\"date\"\n              value={data.date}\n              onChange={props.change}\n            />\n           <p class=\"errors\">{data.invalidInformation.birth_date}</p>\n          </div>\n\n          <div class=\"mb-3\">\n            <label class=\"form-label\" for=\"address\">Адрес</label>\n            <input class=\"form-control\" type=\"text\" id=\"address\" name=\"address\"\n              value={data.address}\n              onChange={props.change}\n            />\n           <p class=\"errors\">{data.invalidInformation.living_address}</p>\n          </div>\n\n          <div class=\"mb-3\">\n            <label class=\"form-label\" for=\"medicine\">Номер полиса ОМС</label>\n            <input class=\"form-control\" type=\"text\" id=\"medicine\" name=\"medicine\"\n                value={data.medicine}\n                onChange={props.change}\n                placeholder=\"00000000000\"\n             />\n            <p class=\"errors\">{data.invalidInformation.insurance_policy}</p>\n          </div>\n\n          <input class=\"btn btn-light\" type='submit' value='Сохранить'/>\n      </form>\n    );\n}\n\nexport default RegistrationForm;\n",["36","37"],{"ruleId":"38","severity":1,"message":"39","line":75,"column":13,"nodeType":"40","messageId":"41","endLine":75,"endColumn":28},{"ruleId":"42","severity":1,"message":"43","line":241,"column":69,"nodeType":"44","messageId":"45","endLine":241,"endColumn":71},{"ruleId":"42","severity":1,"message":"46","line":278,"column":69,"nodeType":"44","messageId":"45","endLine":278,"endColumn":71},{"ruleId":"38","severity":1,"message":"47","line":283,"column":13,"nodeType":"40","messageId":"41","endLine":283,"endColumn":23},{"ruleId":"38","severity":1,"message":"48","line":283,"column":42,"nodeType":"40","messageId":"41","endLine":283,"endColumn":54},{"ruleId":"49","severity":1,"message":"50","line":296,"column":15,"nodeType":"51","endLine":296,"endColumn":87},{"ruleId":"49","severity":1,"message":"50","line":297,"column":15,"nodeType":"51","endLine":297,"endColumn":91},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"38","severity":1,"message":"56","line":2,"column":8,"nodeType":"40","messageId":"41","endLine":2,"endColumn":16},{"ruleId":"38","severity":1,"message":"56","line":2,"column":8,"nodeType":"40","messageId":"41","endLine":2,"endColumn":16},{"ruleId":"38","severity":1,"message":"56","line":2,"column":8,"nodeType":"40","messageId":"41","endLine":2,"endColumn":16},{"ruleId":"52","replacedBy":"57"},{"ruleId":"54","replacedBy":"58"},"no-unused-vars","'registeredUsers' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'searchData' is assigned a value but never used.","'userDataForm' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-native-reassign",["59"],"no-negated-in-lhs",["60"],"'ReactDOM' is defined but never used.",["59"],["60"],"no-global-assign","no-unsafe-negation"]